# @format

service: kak-backend

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [KaKConnectionsTable, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-connections-${self:provider.stage}/index/*"
  environment:
    TABLE_NAME:
      Ref: KaKConnectionsTable
  websocketsApiName: ${self:service}-${self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.message

functions:
  # connectHandler:
  #   handler: onConnect/app.handler
  #   events:
  #     - websocket: $connect
  disconnectHandler:
    handler: onDisconnect/app.handler
    events:
      - websocket: $disconnect
  createRoomHandler:
    handler: createRoom/index.handler
    events:
      - websocket: createRoom

  sendMessageHandler:
    handler: sendMessage/app.handler
    events:
      - websocket: sendMessage

resources:
  Resources:
    KaKConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # GlobalSecondaryIndexes:
        #   - IndexName: roomId-index
        #     KeySchema:
        #       - AttributeName: roomId
        #         KeyType: HASH
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
        #     Projection:
        #       ProjectionType: ALL
        SSESpecification:
          SSEEnabled: False
